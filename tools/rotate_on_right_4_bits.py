__version__ = "$Version: 2.0.0"

from unittest import TestCase

from tools.bytes_2_binary_string import Bytes_2_binary_string
from tools.bytes_2_integer import Bytes_2_integer
from tools.integer_2_bytes import Integer_2_bytes


class Rotate_on_right_4_bits(Bytes_2_integer, Integer_2_bytes):

    def rotate_on_right_4_bits(self, bytes_parameter: bytes, shift: int = 1):
        """Circular shift to the right"""
        block = 0
        size_block = len(bytes_parameter)
        shift %= size_block * 8
        complement_of_shift = size_block * 8 - shift

        if isinstance(bytes_parameter, bytes):
            block = self.bytes_2_integer(bytes_parameter)
            mask = 0x0

            for byte in range(size_block):
                mask |= 0xff << byte * 8

            output = self.integer_2_bytes(
                block << complement_of_shift & mask | block >> shift
            )
            size_output = len(output)

            if size_output != size_block:
                for _ in range(size_block - size_output):
                    output += bytes((0,))

            return output

        print('Fatal error (rol): The argument must be a byte type')
        exit()


class Rotate_on_right_4_bits_Test(TestCase):

    def setUp(self):
        self.test_object = Rotate_on_right_4_bits()

    def test_rotate_on_right_4_bits(self):
        bytes_2_bin_str = Bytes_2_binary_string()
        test_value = b'@ABC'

        test_values = (
            '01000000 01000001 01000010 01000011',
            '10100000 00100000 10100001 00100001',
            '11010000 00010000 01010000 10010000',
            '01101000 00001000 00101000 01001000',
            '00110100 00000100 00010100 00100100',
            '00011010 00000010 00001010 00010010',
            '00001101 00000001 00000101 00001001',
            '10000110 10000000 10000010 10000100',
            '01000011 01000000 01000001 01000010',
            '00100001 10100000 00100000 10100001',
            '10010000 11010000 00010000 01010000',
            '01001000 01101000 00001000 00101000',
            '00100100 00110100 00000100 00010100',
            '00010010 00011010 00000010 00001010',
            '00001001 00001101 00000001 00000101',
            '10000100 10000110 10000000 10000010',
            '01000010 01000011 01000000 01000001',
            '10100001 00100001 10100000 00100000',
            '01010000 10010000 11010000 00010000',
            '00101000 01001000 01101000 00001000',
            '00010100 00100100 00110100 00000100',
            '00001010 00010010 00011010 00000010',
            '00000101 00001001 00001101 00000001',
            '10000010 10000100 10000110 10000000',
            '01000001 01000010 01000011 01000000',
            '00100000 10100001 00100001 10100000',
            '00010000 01010000 10010000 11010000',
            '00001000 00101000 01001000 01101000',
            '00000100 00010100 00100100 00110100',
            '00000010 00001010 00010010 00011010',
            '00000001 00000101 00001001 00001101',
            '10000000 10000010 10000100 10000110',
            '01000000 01000001 01000010 01000011',
            '10100000 00100000 10100001 00100001',
            '11010000 00010000 01010000 10010000',
            '01101000 00001000 00101000 01001000',
            '00110100 00000100 00010100 00100100',
            '00011010 00000010 00001010 00010010',
            '00001101 00000001 00000101 00001001',
            '10000110 10000000 10000010 10000100',
            '01000011 01000000 01000001 01000010',
            '00100001 10100000 00100000 10100001',
            '10010000 11010000 00010000 01010000',
            '01001000 01101000 00001000 00101000',
            '00100100 00110100 00000100 00010100',
            '00010010 00011010 00000010 00001010',
            '00001001 00001101 00000001 00000101',
            '10000100 10000110 10000000 10000010',
            '01000010 01000011 01000000 01000001',
            '10100001 00100001 10100000 00100000',
            '01010000 10010000 11010000 00010000',
            '00101000 01001000 01101000 00001000',
            '00010100 00100100 00110100 00000100',
            '00001010 00010010 00011010 00000010',
            '00000101 00001001 00001101 00000001',
            '10000010 10000100 10000110 10000000',
            '01000001 01000010 01000011 01000000',
            '00100000 10100001 00100001 10100000',
            '00010000 01010000 10010000 11010000',
            '00001000 00101000 01001000 01101000',
            '00000100 00010100 00100100 00110100',
            '00000010 00001010 00010010 00011010',
            '00000001 00000101 00001001 00001101',
            '10000000 10000010 10000100 10000110',
        )

        for item in range(len(test_values)):
            rot_result = self.test_object.rotate_on_right_4_bits(
                test_value, item)

            self.assertEqual(
                test_values[item],
                bytes_2_bin_str.bytes_2_binary_string(rot_result, block_size=8)
            )
