__version__ = "$Version: 2.0.0"

from unittest import TestCase

from tools.bytes_2_integer import Bytes_2_integer
from tools.integer_2_bytes import Integer_2_bytes


class Rol_bits(Bytes_2_integer, Integer_2_bytes):
    def rol_bits(self, bytes_parameter: bytes, shift: int = 1):
        """Circular shift to the left"""
        block = 0
        size_block = len(bytes_parameter)
        shift %= size_block * 8
        complement_of_shift = size_block * 8 - shift

        if isinstance(bytes_parameter, bytes):
            block = self.bytes_2_integer(bytes_parameter)
            mask = 0x0

            for byte in range(size_block):
                mask |= 0xff << byte * 8

            output = self.integer_2_bytes(
                block >> shift | block <<
                complement_of_shift & mask
            )
            sizeOutput = len(output)

            if sizeOutput != size_block:
                for _ in range(size_block - sizeOutput):
                    output += bytes((0,))

            return output

        print('Fatal error (rol): The argument must be a byte type')
        exit()


class Rol_bits_Test(TestCase):
    def setUp(self):
        self.test_object = Rol_bits()

    def test_rol_bits(self):
        test_value = b'1234567890'

        test_values = (
            b'1234567890',
            b'\x18\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98',
            b'\x0cL\x8c\xcd\rM\x8d\xce\x0eL',
            b'\x06&Ff\x86\xa6\xc6\xe7\x07&',
            b'\x03\x13#3CScs\x83\x93',
            b'\x81\x89\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9',
            b'\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4',
            b'`bdfhjlnpr',
            b'0123456789',
            b'\x98\x18\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c',
            b'L\x0cL\x8c\xcd\rM\x8d\xce\x0e',
            b'&\x06&Ff\x86\xa6\xc6\xe7\x07',
            b'\x93\x03\x13#3CScs\x83',
            b'\xc9\x81\x89\x91\x99\xa1\xa9\xb1\xb9\xc1',
            b'\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0',
            b'r`bdfhjlnp',
            b'9012345678',
            b'\x1c\x98\x18\x99\x19\x9a\x1a\x9b\x1b\x9c',
            b'\x0eL\x0cL\x8c\xcd\rM\x8d\xce',
            b'\x07&\x06&Ff\x86\xa6\xc6\xe7',
            b'\x83\x93\x03\x13#3CScs',
            b'\xc1\xc9\x81\x89\x91\x99\xa1\xa9\xb1\xb9',
            b'\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc',
            b'pr`bdfhjln',
            b'8901234567',
            b'\x9c\x1c\x98\x18\x99\x19\x9a\x1a\x9b\x1b',
            b'\xce\x0eL\x0cL\x8c\xcd\rM\x8d',
            b'\xe7\x07&\x06&Ff\x86\xa6\xc6',
            b's\x83\x93\x03\x13#3CSc',
            b'\xb9\xc1\xc9\x81\x89\x91\x99\xa1\xa9\xb1',
            b'\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8',
            b'npr`bdfhjl',
            b'7890123456',
            b'\x1b\x9c\x1c\x98\x18\x99\x19\x9a\x1a\x9b',
            b'\x8d\xce\x0eL\x0cL\x8c\xcd\rM',
            b'\xc6\xe7\x07&\x06&Ff\x86\xa6',
            b'cs\x83\x93\x03\x13#3CS',
            b'\xb1\xb9\xc1\xc9\x81\x89\x91\x99\xa1\xa9',
            b'\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4',
            b'lnpr`bdfhj',
            b'6789012345',
            b'\x9b\x1b\x9c\x1c\x98\x18\x99\x19\x9a\x1a',
            b'M\x8d\xce\x0eL\x0cL\x8c\xcd\r',
            b'\xa6\xc6\xe7\x07&\x06&Ff\x86',
            b'Scs\x83\x93\x03\x13#3C',
            b'\xa9\xb1\xb9\xc1\xc9\x81\x89\x91\x99\xa1',
            b'\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0',
            b'jlnpr`bdfh',
            b'5678901234',
            b'\x1a\x9b\x1b\x9c\x1c\x98\x18\x99\x19\x9a',
            b'\rM\x8d\xce\x0eL\x0cL\x8c\xcd',
            b'\x86\xa6\xc6\xe7\x07&\x06&Ff',
            b'CScs\x83\x93\x03\x13#3',
            b'\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89\x91\x99',
            b'\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc',
            b'hjlnpr`bdf',
            b'4567890123',
            b'\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18\x99\x19',
            b'\xcd\rM\x8d\xce\x0eL\x0cL\x8c',
            b'f\x86\xa6\xc6\xe7\x07&\x06&F',
            b'3CScs\x83\x93\x03\x13#',
            b'\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89\x91',
            b'\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8',
            b'fhjlnpr`bd',
            b'3456789012',
            b'\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18\x99',
            b'\x8c\xcd\rM\x8d\xce\x0eL\x0cL',
            b'Ff\x86\xa6\xc6\xe7\x07&\x06&',
            b'#3CScs\x83\x93\x03\x13',
            b'\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89',
            b'\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4',
            b'dfhjlnpr`b',
            b'2345678901',
            b'\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18',
            b'L\x8c\xcd\rM\x8d\xce\x0eL\x0c',
            b'&Ff\x86\xa6\xc6\xe7\x07&\x06',
            b'\x13#3CScs\x83\x93\x03',
            b'\x89\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81',
            b'\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0',
            b'bdfhjlnpr`',
            b'1234567890',
            b'\x18\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98',
            b'\x0cL\x8c\xcd\rM\x8d\xce\x0eL',
            b'\x06&Ff\x86\xa6\xc6\xe7\x07&',
            b'\x03\x13#3CScs\x83\x93',
            b'\x81\x89\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9',
            b'\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4',
            b'`bdfhjlnpr',
            b'0123456789',
            b'\x98\x18\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c',
            b'L\x0cL\x8c\xcd\rM\x8d\xce\x0e',
            b'&\x06&Ff\x86\xa6\xc6\xe7\x07',
            b'\x93\x03\x13#3CScs\x83',
            b'\xc9\x81\x89\x91\x99\xa1\xa9\xb1\xb9\xc1',
            b'\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0',
            b'r`bdfhjlnp',
            b'9012345678',
            b'\x1c\x98\x18\x99\x19\x9a\x1a\x9b\x1b\x9c',
            b'\x0eL\x0cL\x8c\xcd\rM\x8d\xce',
            b'\x07&\x06&Ff\x86\xa6\xc6\xe7',
            b'\x83\x93\x03\x13#3CScs',
            b'\xc1\xc9\x81\x89\x91\x99\xa1\xa9\xb1\xb9',
            b'\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8\xdc',
            b'pr`bdfhjln',
            b'8901234567',
            b'\x9c\x1c\x98\x18\x99\x19\x9a\x1a\x9b\x1b',
            b'\xce\x0eL\x0cL\x8c\xcd\rM\x8d',
            b'\xe7\x07&\x06&Ff\x86\xa6\xc6',
            b's\x83\x93\x03\x13#3CSc',
            b'\xb9\xc1\xc9\x81\x89\x91\x99\xa1\xa9\xb1',
            b'\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4\xd8',
            b'npr`bdfhjl',
            b'7890123456',
            b'\x1b\x9c\x1c\x98\x18\x99\x19\x9a\x1a\x9b',
            b'\x8d\xce\x0eL\x0cL\x8c\xcd\rM',
            b'\xc6\xe7\x07&\x06&Ff\x86\xa6',
            b'cs\x83\x93\x03\x13#3CS',
            b'\xb1\xb9\xc1\xc9\x81\x89\x91\x99\xa1\xa9',
            b'\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0\xd4',
            b'lnpr`bdfhj',
            b'6789012345',
            b'\x9b\x1b\x9c\x1c\x98\x18\x99\x19\x9a\x1a',
            b'M\x8d\xce\x0eL\x0cL\x8c\xcd\r',
            b'\xa6\xc6\xe7\x07&\x06&Ff\x86',
            b'Scs\x83\x93\x03\x13#3C',
            b'\xa9\xb1\xb9\xc1\xc9\x81\x89\x91\x99\xa1',
            b'\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc\xd0',
            b'jlnpr`bdfh',
            b'5678901234',
            b'\x1a\x9b\x1b\x9c\x1c\x98\x18\x99\x19\x9a',
            b'\rM\x8d\xce\x0eL\x0cL\x8c\xcd',
            b'\x86\xa6\xc6\xe7\x07&\x06&Ff',
            b'CScs\x83\x93\x03\x13#3',
            b'\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89\x91\x99',
            b'\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8\xcc',
            b'hjlnpr`bdf',
            b'4567890123',
            b'\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18\x99\x19',
            b'\xcd\rM\x8d\xce\x0eL\x0cL\x8c',
            b'f\x86\xa6\xc6\xe7\x07&\x06&F',
            b'3CScs\x83\x93\x03\x13#',
            b'\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89\x91',
            b'\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4\xc8',
            b'fhjlnpr`bd',
            b'3456789012',
            b'\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18\x99',
            b'\x8c\xcd\rM\x8d\xce\x0eL\x0cL',
            b'Ff\x86\xa6\xc6\xe7\x07&\x06&',
            b'#3CScs\x83\x93\x03\x13',
            b'\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81\x89',
            b'\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0\xc4',
            b'dfhjlnpr`b',
            b'2345678901',
            b'\x99\x19\x9a\x1a\x9b\x1b\x9c\x1c\x98\x18',
            b'L\x8c\xcd\rM\x8d\xce\x0eL\x0c',
            b'&Ff\x86\xa6\xc6\xe7\x07&\x06',
            b'\x13#3CScs\x83\x93\x03',
            b'\x89\x91\x99\xa1\xa9\xb1\xb9\xc1\xc9\x81',
            b'\xc4\xc8\xcc\xd0\xd4\xd8\xdc\xe0\xe4\xc0',
            b'bdfhjlnpr`',
            b'1234567890',
        )

        for item in range(len(test_values)):
            self.assertEqual(
                test_values[item],
                self.test_object.rol_bits(test_value, item)
            )
