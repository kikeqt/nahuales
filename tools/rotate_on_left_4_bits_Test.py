__version__ = "$Version: 0.0.1"

from unittest import TestCase

from .rotate_on_left_4_bits import Rotate_on_left_4_bits
from tools.bytes_2_binary_string import Bytes_2_binary_string


class Rotate_on_left_4_bits_Test(TestCase):

    def setUp(self):
        self.test_object = Rotate_on_left_4_bits()

    def test_rotate_on_left_4_bits(self):
        bytes_2_bin_str = Bytes_2_binary_string()
        test_value = b'@ABC'

        test_values = (
            '01000000 01000001 01000010 01000011',
            '10000000 10000010 10000100 10000110',
            '00000001 00000101 00001001 00001101',
            '00000010 00001010 00010010 00011010',
            '00000100 00010100 00100100 00110100',
            '00001000 00101000 01001000 01101000',
            '00010000 01010000 10010000 11010000',
            '00100000 10100001 00100001 10100000',
            '01000001 01000010 01000011 01000000',
            '10000010 10000100 10000110 10000000',
            '00000101 00001001 00001101 00000001',
            '00001010 00010010 00011010 00000010',
            '00010100 00100100 00110100 00000100',
            '00101000 01001000 01101000 00001000',
            '01010000 10010000 11010000 00010000',
            '10100001 00100001 10100000 00100000',
            '01000010 01000011 01000000 01000001',
            '10000100 10000110 10000000 10000010',
            '00001001 00001101 00000001 00000101',
            '00010010 00011010 00000010 00001010',
            '00100100 00110100 00000100 00010100',
            '01001000 01101000 00001000 00101000',
            '10010000 11010000 00010000 01010000',
            '00100001 10100000 00100000 10100001',
            '01000011 01000000 01000001 01000010',
            '10000110 10000000 10000010 10000100',
            '00001101 00000001 00000101 00001001',
            '00011010 00000010 00001010 00010010',
            '00110100 00000100 00010100 00100100',
            '01101000 00001000 00101000 01001000',
            '11010000 00010000 01010000 10010000',
            '10100000 00100000 10100001 00100001',
            '01000000 01000001 01000010 01000011',
            '10000000 10000010 10000100 10000110',
            '00000001 00000101 00001001 00001101',
            '00000010 00001010 00010010 00011010',
            '00000100 00010100 00100100 00110100',
            '00001000 00101000 01001000 01101000',
            '00010000 01010000 10010000 11010000',
            '00100000 10100001 00100001 10100000',
            '01000001 01000010 01000011 01000000',
            '10000010 10000100 10000110 10000000',
            '00000101 00001001 00001101 00000001',
            '00001010 00010010 00011010 00000010',
            '00010100 00100100 00110100 00000100',
            '00101000 01001000 01101000 00001000',
            '01010000 10010000 11010000 00010000',
            '10100001 00100001 10100000 00100000',
            '01000010 01000011 01000000 01000001',
            '10000100 10000110 10000000 10000010',
            '00001001 00001101 00000001 00000101',
            '00010010 00011010 00000010 00001010',
            '00100100 00110100 00000100 00010100',
            '01001000 01101000 00001000 00101000',
            '10010000 11010000 00010000 01010000',
            '00100001 10100000 00100000 10100001',
            '01000011 01000000 01000001 01000010',
            '10000110 10000000 10000010 10000100',
            '00001101 00000001 00000101 00001001',
            '00011010 00000010 00001010 00010010',
            '00110100 00000100 00010100 00100100',
            '01101000 00001000 00101000 01001000',
            '11010000 00010000 01010000 10010000',
            '10100000 00100000 10100001 00100001',
        )

        for item in range(len(test_values)):
            rot_result = self.test_object.rotate_on_left_4_bits(
                test_value, item)
            
            self.assertEqual(
                test_values[item],
                bytes_2_bin_str.bytes_2_binary_string(rot_result, block_size=8)
            )
